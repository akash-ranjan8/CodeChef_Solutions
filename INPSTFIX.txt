#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>
# define MAX 1000
struct stack
{
    int top;
    char item[MAX];
};

int empty(struct stack *s)
{
	if(s->top==-1)
	return(1);
	else
	return(0);
}

int full(struct stack *s)
{
	if(s->top==(MAX-1))
	return(1);
	else
	return(0);
}
void push(struct stack *s,int x)
{
	if (full(s)){
		printf("%s","stack overflow");
		exit(1);
	}
	else{
	
		s->top++;
		s->item[s->top]=x;
	}
	
}

int pop(struct stack *s)
{
	int x=0;
	if(empty(s)){
	printf("%s","stack underflow");
	exit(1);
    }
	else{
	x=s->item[s->top];
	s->top--;
	return (x);
	}

	return 0;
}
int isOperand(char symb)
{
	if(symb>='A' && symb<='Z')
	return(1);
	else
	return(0);
}
char stackTop(struct stack *s)
{
	return(s->item[s->top]);
}

int prcd(char op)
{
	switch(op)
	{
	case '+':return(1);
	case '-':return(1);
	case '*':return(3);
	case '/':return(3);
	case '^':return(5);

	}
	return(0);
}
int prced(char op1,char op2)
{
	 if(op1=='('||op1==')')
	return(0);
	else if (op2=='('||op2=='(')
	return(0);

	else if(prcd(op1)>prcd(op2))
	return(1);
		else if(prcd(op1)==prcd(op2))
	return(1);
	else
	return(0);
}

void InfixToPostfix(char infix[MAX],char postr[MAX],struct stack *s)
{
	int pos=0;
	int i;
	char symb,topsymb;
	for(i=0;infix[i]!='\0';i++)
	{
		symb=infix[i];
		if(isOperand(symb))
			postr[pos++]=symb;
			
		else
		{
			
			while(!empty(s) && prced(stackTop(s),symb))
			{
				topsymb=pop(s);
				postr[pos++]=topsymb;
			}
			if(empty(s) || symb!=')')
			push(s,symb);
			else
			topsymb=pop(s);
		}
		
		
	}
	
	while(!empty(s))
	{
		postr[pos++]=pop(s);
	}
	postr[pos]='\0';
	

}
void main()
{ int t;
  scanf("%d",&t);
  while(t--)
  {
      int n;
      scanf("%d",&n);
      struct stack s;
      s.top=-1;
      char infix[MAX];
      char postr[MAX];
      scanf("%s",infix);
	  InfixToPostfix(infix,postr,&s);
	  printf("%s\n",postr);
      
  }
}
